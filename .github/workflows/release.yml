name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

  build-and-upload:
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
    
    - name: Build binaries
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        mkdir -p dist
        EXT=""
        if [ "$GOOS" = "windows" ]; then
          EXT=".exe"
        fi
        
        go build -o dist/conure-db${EXT} ./cmd/conure-db
        go build -o dist/repl${EXT} ./cmd/repl
        
        # Create archive
        cd dist
        if [ "$GOOS" = "windows" ]; then
          zip -r ../conuredb-${GITHUB_REF#refs/tags/}-${GOOS}-${GOARCH}.zip .
        else
          tar -czf ../conuredb-${GITHUB_REF#refs/tags/}-${GOOS}-${GOARCH}.tar.gz .
        fi
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./conuredb-${{ github.ref_name }}-${{ matrix.goos }}-${{ matrix.goarch }}.${{ matrix.goos == 'windows' && 'zip' || 'tar.gz' }}
        asset_name: conuredb-${{ github.ref_name }}-${{ matrix.goos }}-${{ matrix.goarch }}.${{ matrix.goos == 'windows' && 'zip' || 'tar.gz' }}
        asset_content_type: ${{ matrix.goos == 'windows' && 'application/zip' || 'application/gzip' }}

  docker-release:
    runs-on: ubuntu-latest
    needs: create-release
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract version
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          conuredb/conuredb:${{ steps.version.outputs.VERSION }}
          conuredb/conuredb:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  helm-release:
    runs-on: ubuntu-latest
    needs: create-release
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'
    
    - name: Package Helm charts
      run: |
        helm package charts/conuredb-single
        helm package charts/conuredb-ha
    
    - name: Upload Helm packages
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./conuredb-single-*.tgz
        asset_name: conuredb-single-${{ github.ref_name }}.tgz
        asset_content_type: application/gzip
    
    - name: Upload HA Helm package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./conuredb-ha-*.tgz
        asset_name: conuredb-ha-${{ github.ref_name }}.tgz
        asset_content_type: application/gzip
