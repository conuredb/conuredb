{{- if and .Values.pdb.enabled (gt (int .Values.voters.replicas) 1) }}
{{- /* Calculate majority: floor((voters + arbiter)/2) + 1; arbiter counts if mode=always OR (mode=auto AND replicas even) */ -}}
{{- /* Total voters include bootstrap (1) + voters.replicas - 1 = voters.replicas */ -}}
{{- $rep := int .Values.voters.replicas -}}
{{- $arb := 0 -}}
{{- if or (eq .Values.arbiter.mode "always") (and (eq .Values.arbiter.mode "auto") (eq (mod $rep 2) 0)) -}}
{{- $arb = 1 -}}
{{- end -}}
{{- $maj := add (div (add $rep $arb) 2) 1 -}}
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: conure-pdb
spec:
  minAvailable: {{ $maj }}
  selector:
    matchLabels:
      app.kubernetes.io/name: conuredb
      bootstrap: "false"  # Exclude bootstrap pod from PDB to prevent disruption
---
# Separate PDB for bootstrap to ensure it's never disrupted
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: conure-bootstrap-pdb
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: conuredb
      bootstrap: "true"
{{- end }}